<#
This is a collection of scripts and snippets to help with content management and administration
#>

#########
Find and list all retired applications
#########

# Query for all expired applications
$ExpiredApps = Get-CMApplication | Where-Object { $_.IsExpired -eq $true }

# Extract application names
$AppNames = $ExpiredApps | Select-Object -ExpandProperty LocalizedDisplayName

# Export the names to a text file
$OutputFile = "C:\wherever\you\like\content_cleanup\output\RetiredApps.txt"
$AppNames | Out-File -FilePath $OutputFile -Encoding UTF8

Write-Output "Expired application names have been exported to $OutputFile"



########
Return master source folder location from list of retired applications. Munge above list and process to return name and path.
This file returns all the deployment types for every application, then uses regex to scrub the SDMPackageXML field of the deployment type for the location path. If you're bored, pull that SDMPackageXML parameter manually and see how ridiculous it is.
########

# Define the input file path containing application names (one per line)
$InputFile = "C:\whatever\content_cleanup\output\RetiredApps.txt"

# Define the output CSV file path
$OutputFile = "C:\whatever\content_cleanup\output\DeploymentTypeDetailsJustLocation.csv"

# Initialize an array to store the results
$Results = @()

# Import application names from the input file
$ApplicationNames = Get-Content -Path $InputFile

# Loop through each application name
foreach ($ApplicationName in $ApplicationNames) {
    # Query deployment types for the current application
    $DeploymentTypes = Get-CMDeploymentType -ApplicationName $ApplicationName

    # Process each deployment type
    foreach ($DeploymentType in $DeploymentTypes) {
        # Extract the content between <Location> and </Location>
        $SDMPackageXML = $DeploymentType.SDMPackageXML
        $Location = if ($SDMPackageXML -match "<Location>(.*?)</Location>") {
            $matches[1]
        } else {
            "No location found"
        }

        # Add the result to the results array
        $Results += [PSCustomObject]@{
            ApplicationName      = $ApplicationName
            Location             = $Location
        }
    }
}

# Export the results to a CSV file
$Results | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8

Write-Host "Deployment type details with extracted locations have been exported to $OutputFile"


#######
Delete content from Distribution Points and Distribution Point Groups manually via list, just copy/paste and list whatever you like:
#######


$applist = get-content C:\whatever\input\retired.txt
ForEach ($app in $applist) {
Remove-CMContentDistribution -ApplicationName $app -DistributionPointName "yourdpname.yourdomain.com" -force;
Remove-CMContentDistribution -ApplicationName $app -DistributionPointGroupName "Your Distribution Point" -force;


#######
CAUTION: Force remove application list from ALL DP and ALL DPG. This script will import a list of applications, then force remove it after enumerating all of your DPs and all of your DPGS. If it's only deployed to a group, it will say 'Failed to Remove' for all individual DP's, but then will remove the content when it processes the group assignment.
#######

# Define the input file containing application names
$InputFile = "C:\whatever\content_cleanup\applications.txt"

# Check if the input file exists
if (-Not (Test-Path $InputFile)) {
    Write-Host "Input file not found: $InputFile" -ForegroundColor Red
    exit
}

# Get the list of application names from the input file
$AppList = Get-Content -Path $InputFile

# Get all distribution points in the environment
$DistributionPoints = Get-CMDistributionPoint | Select-Object -ExpandProperty NetworkOSPath

# Get all distribution point groups in the environment
$DistributionPointGroups = Get-CMDistributionPointGroup | Select-Object -ExpandProperty Name

# Check if any distribution points or groups were found
if (-Not $DistributionPoints -and -Not $DistributionPointGroups) {
    Write-Host "No distribution points or distribution point groups found in the environment." -ForegroundColor Red
    exit
}

# Process each application
foreach ($App in $AppList) {
    # Process individual distribution points
    foreach ($DP in $DistributionPoints) {
        try {
            # Remove the content from the current distribution point
            Remove-CMContentDistribution -ApplicationName $App -DistributionPointName $DP -Force -ErrorAction Stop
            Write-Host "Removed content for application '$App' from distribution point '$DP'."
        } catch {
            Write-Host "Failed to remove content for application '$App' from distribution point '$DP': $_" -ForegroundColor Yellow
        }
    }

    # Process distribution point groups
    foreach ($DPG in $DistributionPointGroups) {
        try {
            # Remove the content from the current distribution point group
            Remove-CMContentDistribution -ApplicationName $App -DistributionPointGroupName $DPG -Force -ErrorAction Stop
            Write-Host "Removed content for application '$App' from distribution point group '$DPG'."
        } catch {
            Write-Host "Failed to remove content for application '$App' from distribution point group '$DPG': $_" -ForegroundColor Yellow
        }
    }
}
